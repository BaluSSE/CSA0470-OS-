#include <stdio.h>
#include <stdlib.h>

#define MEMORY_SIZE 1000

struct MemoryBlock {
    int size;
    int allocated;
};

void initializeMemory(struct MemoryBlock memory[], int size);
void displayMemory(struct MemoryBlock memory[], int size);
void firstFit(struct MemoryBlock memory[], int size, int processSize);
void bestFit(struct MemoryBlock memory[], int size, int processSize);
void worstFit(struct MemoryBlock memory[], int size, int processSize);

int main() {
    struct MemoryBlock memory[MEMORY_SIZE];
    int choice, processSize;

    initializeMemory(memory, MEMORY_SIZE);

    do {
        printf("\nMemory Allocation Strategies:\n");
        printf("1. First Fit\n");
        printf("2. Best Fit\n");
        printf("3. Worst Fit\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter process size: ");
                scanf("%d", &processSize);
                firstFit(memory, MEMORY_SIZE, processSize);
                displayMemory(memory, MEMORY_SIZE);
                break;
            case 2:
                printf("Enter process size: ");
                scanf("%d", &processSize);
                bestFit(memory, MEMORY_SIZE, processSize);
                displayMemory(memory, MEMORY_SIZE);
                break;
            case 3:
                printf("Enter process size: ");
                scanf("%d", &processSize);
                worstFit(memory, MEMORY_SIZE, processSize);
                displayMemory(memory, MEMORY_SIZE);
                break;
            case 4:
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    } while (choice != 4);

    return 0;
}

void initializeMemory(struct MemoryBlock memory[], int size) {
    for (int i = 0; i < size; i++) {
        memory[i].size = 0;
        memory[i].allocated = 0;
    }
}

void displayMemory(struct MemoryBlock memory[], int size) {
    printf("\nMemory Status:\n");
    for (int i = 0; i < size; i++) {
        printf("[%d] ", memory[i].size);
        if (memory[i].allocated) {
            printf("Allocated  ");
        } else {
            printf("Free       ");
        }
    }
    printf("\n");
}

void firstFit(struct MemoryBlock memory[], int size, int processSize) {
    for (int i = 0; i < size; i++) {
        if (!memory[i].allocated && memory[i].size >= processSize) {
            memory[i].allocated = 1;
            break;
        }
    }
}

void bestFit(struct MemoryBlock memory[], int size, int processSize) {
    int bestFitIndex = -1;
    int minSize = MEMORY_SIZE + 1;

    for (int i = 0; i < size; i++) {
        if (!memory[i].allocated && memory[i].size >= processSize) {
            if (memory[i].size < minSize) {
                minSize = memory[i].size;
                bestFitIndex = i;
            }
        }
    }

    if (bestFitIndex != -1) {
        memory[bestFitIndex].allocated = 1;
    }
}

void worstFit(struct MemoryBlock memory[], int size, int processSize) {
    int worstFitIndex = -1;
    int maxSize = -1;

    for (int i = 0; i < size; i++) {
        if (!memory[i].allocated && memory[i].size >= processSize) {
            if (memory[i].size > maxSize) {
                maxSize = memory[i].size;
                worstFitIndex = i;
            }
        }
    }

    if (worstFitIndex != -1) {
        memory[worstFitIndex].allocated = 1;
    }
}
